fullnameOverride: ""
nameOverride: ""
replicas: 2



image:
  repository: quay.io/keycloak/keycloak
  tag: "24.0"
  pullPolicy: Always


hostAliases: []
enableServiceLinks: true
podManagementPolicy: OrderedReady
updateStrategy: RollingUpdate
restartPolicy: Always
serviceAccount:
  create: true
  allowReadPods: false
  name: ""
  annotations: {}
  labels: {}
  imagePullSecrets: []
  automountServiceAccountToken: true
rbac:
  create: false
  rules: []
podSecurityContext:
  fsGroup: 1000
securityContext:
  runAsUser: 1000
  runAsNonRoot: true
extraInitContainers: ""
skipInitContainers: false
extraContainers: ""
lifecycleHooks: ""
terminationGracePeriodSeconds: 60
clusterDomain: cluster.local
command:
- "/opt/keycloak/bin/kc.sh"
- "--verbose"
- "start"
- "--http-enabled=true"
- "--http-port=8080"
- "--hostname-strict=false"
- "--hostname-strict-https=false"
- "--spi-events-listener-jboss-logging-success-level=info"
- "--spi-events-listener-jboss-logging-error-level=warn"
args: []
extraEnv: |
  - name: KEYCLOAK_ADMIN
    valueFrom:
      secretKeyRef:
        name: {{ include "keycloak.fullname" . }}-admin-creds
        key: user
  - name: KEYCLOAK_ADMIN_PASSWORD
    valueFrom:
      secretKeyRef:
        name: {{ include "keycloak.fullname" . }}-admin-creds
        key: password
  - name: JAVA_OPTS_APPEND
    value: >-
      -XX:+UseContainerSupport
      -XX:MaxRAMPercentage=50.0
      -Djava.awt.headless=true
      -Djgroups.dns.query={{ include "keycloak.fullname" . }}-headless
  - name: KC_HOSTNAME_URL
    value: 'https://keycloak-des.justicia.junta-andalucia.es/auth'
  - name: KC_HOSTNAME_ADMIN_URL
    value: 'https://keycloak-des.justicia.junta-andalucia.es/auth'
extraEnvFrom: ""
priorityClassName: ""
#anti-affinity: "soft"
affinity: |
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchLabels:
            {{- include "keycloak.selectorLabels" . | nindent 10 }}
          matchExpressions:
            - key: app.kubernetes.io/component
              operator: NotIn
              values:
                - test
        topologyKey: kubernetes.io/hostname
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchLabels:
              {{- include "keycloak.selectorLabels" . | nindent 12 }}
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: NotIn
                values:
                  - test
          topologyKey: topology.kubernetes.io/zone
topologySpreadConstraints:
nodeSelector: {}
tolerations: []
podLabels: {}
podAnnotations: {}
livenessProbe: |
  httpGet:
    path: '{{ tpl .Values.http.relativePath $ | trimSuffix "/" }}/health/live'
    port: http
  initialDelaySeconds: 0
  timeoutSeconds: 5
readinessProbe: |
  httpGet:
    path: '{{ tpl .Values.http.relativePath $ | trimSuffix "/" }}/health/ready'
    port: http
  initialDelaySeconds: 10
  timeoutSeconds: 1

startupProbe: |
  httpGet:
    path: '{{ tpl .Values.http.relativePath $ | trimSuffix "/" }}/health'
    port: http
  initialDelaySeconds: 15
  timeoutSeconds: 1
  failureThreshold: 60
  periodSeconds: 5

resources:
  requests:
    cpu: "1000m"
    memory: "2Gi"
  limits:
    cpu: "2000m"
    memory: "2Gi"
extraVolumes:
   - name: spi
     configMap:
       name: {{ include "keycloak.fullname" . }}-spi
extraVolumeMounts:
   - name: spi
     mountPath: /opt/keycloak/providers
extraPorts: []
podDisruptionBudget: {}
statefulsetAnnotations: {}
statefulsetLabels: {}
secrets:
  admin-creds:
    annotations:
      my-test-annotation: Test secret for {{ include "keycloak.fullname" . }}
    stringData:
      user: admin
      password: admin
service:
  annotations: {}
  labels: {}
  type: NodePort
  loadBalancerIP: ""
  httpPort: 8080
  httpNodePort: 30000
  httpsPort:
  httpsNodePort:
  extraPorts: []
  loadBalancerSourceRanges: []
  externalTrafficPolicy: "Cluster"
  sessionAffinity: ""
  sessionAffinityConfig: {}
serviceHeadless:
  annotations: {}
ingress:
  enabled: false
  ingressClassName: "nginx"
  servicePort: http
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    app.kubernetes.io/name: Keycloak
    ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/force-ssl-redirect: "true"
    #ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    #nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/enable-logs: "true"
  labels: {}
  rules:
  - host: '{{ .Release.Name }}.justicia.junta-andalucia.es'
    paths:
    - path: '{{ tpl .Values.http.relativePath $ | trimSuffix "/" }}/'
      pathType: Prefix
  tls:
  - secretName: ""
    hosts:
    - '{{ .Release.Name }}.justicia.junta-andalucia.es'

  console:
    enabled: false
  #paths:
# - path: /logs/keycloak
#  pathType: Prefix
# backend:
#  serviceName: keycloakLog
# servicePort: 80
networkPolicy:
  enabled: false
route:
  enabled: false
dbchecker:
  enabled: false
database:
  # don't create secret for db password. Instead use existing k8s secret
  # existingSecret: "my-existent-dbpass-secret"
  # existingSecretKey: "password"
  existingSecret: ""
  existingSecretKey: ""
  # E.g. dev-file, dev-mem, mariadb, mssql, mysql, oracle or postgres
  vendor: oracle
  hostname: iusslbddesa04.justicia.junta-andalucia.es
  port: 1521
  database: pdbdesa04.justicia.junta-andalucia.es
  username: Keycloak_owner
  password: 3f76k9cd14

cache:
  stack: default
proxy:
  enabled: false
  mode: edge
metrics:
  enabled: true
health:
  enabled: true
http:
  relativePath: "/auth"
serviceMonitor:
  enabled: false
extraServiceMonitor:
  enabled: false
prometheusRule:
  enabled: false
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 3
test:
  enabled: false
